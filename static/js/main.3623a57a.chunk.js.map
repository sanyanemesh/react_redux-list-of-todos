{"version":3,"sources":["store/query.ts","store/loading.ts","store/todos.ts","store/sort.ts","store/index.ts","helpers/api.ts","components/Button.tsx","components/TodoList.tsx","components/Filter.tsx","App.tsx","index.tsx"],"names":["queryReducer","query","action","type","loadingReducer","loading","todosReducer","todos","filter","todo","todoId","id","sortBy","field","defaultsortState","order","completed","sortReducer","sortState","getLoading","state","getTodos","getQuery","getVisibleTodos","compare","sort","a","b","title","localeCompare","user","name","visibleTodos","includes","reverse","rootReducer","combineReducers","store","createStore","composeWithDevTools","getAll","url","fetch","then","response","json","Button","text","onClick","disabled","className","TodoList","dispatch","useDispatch","useSelector","map","key","Filter","value","placeholder","onChange","target","setQuery","getAppData","todosFromServer","users","Promise","ok","setTimeout","find","userId","App","length","initTodos","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3623a57a.chunk.js","sourcesContent":["import { Action } from 'redux';\n\nconst SET_QUERY = 'SET_QUERY';\n\ntype SetQueryAction = Action<typeof SET_QUERY> & {\n  query: string;\n};\n\nexport const setQuery = (query: string) => ({\n  type: SET_QUERY,\n  query,\n});\n\ntype AlowwedActions = SetQueryAction;\n\nconst queryReducer = (query = '', action: AlowwedActions): string => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n    default:\n      return query;\n  }\n};\n\nexport default queryReducer;\n","import { Action } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\ntype StartLoadingAction = Action<typeof START_LOADING>;\ntype FinishLoadingAction = Action<typeof FINISH_LOADING>;\n\nexport const startLoading = (): StartLoadingAction => ({ type: START_LOADING });\nexport const finishLoading = (): FinishLoadingAction => ({ type: FINISH_LOADING });\n\ntype AlowwedActions = StartLoadingAction | FinishLoadingAction;\n\nconst loadingReducer = (loading = false, action: AlowwedActions): boolean => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n    case FINISH_LOADING:\n      return false;\n    default:\n      return loading;\n  }\n};\n\nexport default loadingReducer;\n","import { Action } from 'redux';\n\nconst INIT_TODOS = 'INIT_TODOS';\nconst DELETE_TODO = 'DELETE_TODO';\n\ntype InitTodosAction = Action<typeof INIT_TODOS> & {\n  todos: Todo[];\n};\n\ntype DeleteTodosAction = Action<typeof DELETE_TODO> & {\n  todoId: number;\n};\n\nexport const initTodos = (todos: Todo[]): InitTodosAction => ({\n  type: INIT_TODOS,\n  todos,\n});\nexport const deleteTodo = (todoId: number): DeleteTodosAction => ({\n  type: DELETE_TODO,\n  todoId,\n});\n\ntype AlowwedActions = InitTodosAction | DeleteTodosAction;\n\nconst todosReducer = (todos: Todo[] = [], action: AlowwedActions): Todo[] => {\n  switch (action.type) {\n    case DELETE_TODO:\n      return todos.filter(todo => action.todoId !== todo.id);\n    case INIT_TODOS:\n      return action.todos;\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { Action } from 'redux';\n\nconst SORT_BY = 'SORT_BY';\n\n\ntype SortByAction = Action<typeof SORT_BY> & {\n  field: string;\n};\n\nexport const sortBy = (field: string): SortByAction => ({ type: SORT_BY, field });\n\ntype AlowwedActions = SortByAction;\n\n\ntype SortState = {\n  field: string;\n  order: string;\n  completed: boolean;\n};\n\nconst defaultsortState = {\n  field: 'id',\n  order: 'ASC',\n  completed: true || false,\n};\n\nconst sortReducer = (\n  sortState: SortState = defaultsortState,\n  action: AlowwedActions,\n): SortState => {\n  switch (action.type) {\n    case SORT_BY:\n      if (action.field === sortState.field) {\n        return {\n          ...sortState,\n          order: sortState.order === 'ASC' ? 'DESC' : 'ASC',\n        };\n      }\n\n      return {\n        ...sortState,\n        field: action.field,\n        order: 'ASC',\n      };\n    default:\n      return sortState;\n  }\n};\n\nexport default sortReducer;\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport queryReducer from './query';\nimport loadingReducer from './loading';\nimport todosReducer from './todos';\nimport sortReducer from './sort';\n\n// Selectors\nexport const getLoading = (state: RootState) => state.loading;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getQuery = (state: RootState) => state.query;\n\ntype TodoComparator = (a: Todo, b: Todo) => number;\n\nexport const getVisibleTodos = (state: RootState) => {\n  let compare: TodoComparator = () => 0;\n\n  switch (state.sort.field) {\n    case 'title':\n      compare = (a: Todo, b: Todo) => a.title.localeCompare(b.title);\n      break;\n    case 'id':\n      compare = (a: Todo, b: Todo) => a.id - b.id;\n      break;\n    case 'completed':\n      compare = (a: Todo, b: Todo) => +a.completed - +b.completed;\n      break;\n    case 'user':\n      compare = (a: Todo, b: Todo) => ((a.user && b.user)\n        ? a.user.name.localeCompare(b.user.name)\n        : 0);\n      break;\n    default:\n  }\n\n  const visibleTodos = state.todos.filter(todo => todo.title.includes(state.query))\n    .sort(compare);\n\n  if (state.sort.order === 'DESC') {\n    visibleTodos.reverse();\n  }\n\n  return visibleTodos;\n};\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  todos: todosReducer,\n  query: queryReducer,\n  sort: sortReducer,\n\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(`${API_URL}${url}.json`)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => getAll<User>('/users');\nexport const getTodos = () => getAll<Todo>('/todos');\n","import React from 'react';\n\ntype Props = {\n  text: string;\n  onClick: () => void;\n  disabled?: boolean;\n};\n\nconst Button: React.FC<Props> = ({\n  text,\n  onClick,\n  disabled = false,\n}) => {\n  return (\n    <button\n      className=\"button btn load-btn\"\n      type=\"button\"\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getVisibleTodos } from '../store';\nimport { deleteTodo } from '../store/todos';\n\n\nimport Button from './Button';\n\nconst TodoList = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getVisibleTodos);\n\n  return (\n    <>\n      <ul className=\"list\">\n        {todos.map(todo => (\n          <li className=\"card\" key={todo.id}>\n            <br />\n            <span className=\"card__number\">{todo.id}</span>\n            <p>\n              <strong>User: </strong>\n              <i className=\"user__name\">{todo.user?.name}</i>\n            </p>\n            <p>\n              <strong>To-do: </strong>\n              <i>{todo.title}</i>\n            </p>\n            <p>\n              <strong>Complete: </strong>\n              {\n                todo.completed\n                  ? <span className=\"todo__done\">Done</span>\n                  : <span className=\"todo__notDone\">In process</span>\n              }\n            </p>\n            <Button\n              text=\"Delete todo\"\n              onClick={() => {\n                dispatch(deleteTodo(todo.id));\n              }}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n\n  );\n};\n\nexport default TodoList;\n\n\n// <input\n//             type=\"checkbox\"\n//             defaultChecked={todo.completed}\n//           />\n//\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getQuery } from '../store';\nimport { setQuery } from '../store/query';\nimport { sortBy } from '../store/sort';\n\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const query = useSelector(getQuery);\n\n  return (\n    <div>\n      <button className=\"btn sort-status-btn\" type=\"button\" onClick={() => dispatch(sortBy('completed'))}>\n        Sort by status\n      </button>\n\n      <button className=\"btn sort-title-btn\" type=\"button\" onClick={() => dispatch(sortBy('title'))}>\n        Sort by title\n      </button>\n\n      <button className=\"btn sort-user-btn\" type=\"button\" onClick={() => dispatch(sortBy('user'))}>\n        Sort by user\n      </button>\n\n      <button className=\"btn reset-btn\" type=\"button\" onClick={() => dispatch(sortBy('id'))}>\n        Reset\n      </button>\n\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={query}\n        placeholder=\"Search by title\"\n        onChange={({ target }) => {\n          dispatch(setQuery(target.value));\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.scss';\n\nimport * as api from './helpers/api';\nimport {\n  initTodos,\n} from './store/todos';\nimport {\n  startLoading, finishLoading,\n} from './store/loading';\nimport {\n  getQuery,\n  getTodos,\n  getLoading,\n} from './store';\nimport Button from './components/Button';\nimport TodoList from './components/TodoList';\nimport Filter from './components/Filter';\n\nconst getAppData = async (): Promise<Todo[]> => {\n  const todosFromServer = await api.getTodos();\n  const users = await api.getUsers();\n\n  await new Promise(ok => setTimeout(ok, 1000));\n\n  return todosFromServer.map(todo => ({\n    ...todo,\n    user: users.find(user => user.id === todo.userId) || null,\n  }));\n};\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n\n  const loading = useSelector(getLoading);\n  const query = useSelector(getQuery);\n\n  const initData = () => {\n    dispatch(startLoading());\n\n    getAppData()\n      .then(todosFromServer => {\n        dispatch(initTodos(todosFromServer));\n      })\n      .finally(() => {\n        dispatch(finishLoading());\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">\n        Redux list of todos\n        {' '}\n        {query}\n      </h1>\n\n\n      {!todos.length ? (\n        <Button\n          text={loading ? 'Loading...' : 'Load'}\n          disabled={loading}\n          onClick={initData}\n        />\n      ) : (\n        <>\n          <Filter />\n          <TodoList />\n        </>\n      )}\n\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}